# -*- coding: utf-8 -*-
"""Logistic regression for MAGIC Gamma Telescope.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18UnqVfXic-pZaAzD8TQWlyq_zx4WqB4Q
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

columns = ['fLength', 'fWidth', 'fSize', 'fConc', 'fConc1', 'fAsym', 'fM3Long', 'fM3Trans', 'fAlpha', 'fDist', 'class']
df = pd.read_csv("MAGIC Gamma Telescope.csv")

# Map class labels: gamma 'g' -> 1, hadron 'h' -> 0
df['class'] = df['class'].map({'g': 1, 'h': 0})

if df.isnull().sum().sum() > 0:
    print("Warning: Missing values found!")
else:
    print("No missing values.")

X = df.drop('class', axis=1)
y = df['class']

if df.isnull().sum().sum() > 0:
    print("Warning: Missing values found!")
else:
    print("No missing values.")

X = df.drop('class', axis=1)
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y)

print("Training set class distribution:")
print(y_train.value_counts(normalize=True))

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)
X_train_poly = poly.fit_transform(X_train_scaled)
X_test_poly = poly.transform(X_test_scaled)

param_grid = {
    'C': [0.01, 0.1, 0.5, 1, 5],
    'solver': ['liblinear', 'lbfgs'],
    'class_weight': ['balanced', None]
}

logreg = LogisticRegression(max_iter=1000, random_state=42)

grid_search = GridSearchCV(
    estimator=logreg,
    param_grid=param_grid,
    scoring='accuracy',
    cv=5,
    n_jobs=-1,
    verbose=1
)

grid_search.fit(X_train_poly, y_train)
print(f"Best hyperparameters: {grid_search.best_params_}")
print(f"Best CV accuracy: {grid_search.best_score_:.4f}")

best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_test_poly)
accuracy = accuracy_score(y_test, y_pred)
print(f"Test set accuracy: {accuracy:.4f}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=['Hadron', 'Gamma']))

cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Hadron', 'Gamma'],
            yticklabels=['Hadron', 'Gamma'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

feature_names_poly = poly.get_feature_names_out(X.columns)

coefs = pd.Series(np.abs(best_model.coef_[0]), index=feature_names_poly)
coefs = coefs.sort_values(ascending=False)

print("Top Feature Importances (absolute coefficients):")
print(coefs.head(20))

plt.figure(figsize=(12, 6))
coefs.head(20).plot(kind='bar')
plt.title('Top 20 Feature Importances (Logistic Regression Coefficients)')
plt.show()